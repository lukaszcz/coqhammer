DECLARE PLUGIN "hammer_tactics"

{
open Ltac_plugin
open Stdarg
open Tacarg
open Pcoq.Prim
open Pcoq.Constr
open Hammer_lib
open Hammer_errors
open Sauto
open Tactics_main

open Proofview.Notations
}

(*****************************************************************************)
(* Argument parsing *)

ARGUMENT EXTEND sauto_bopt
| [ "on" ] -> { true }
| [ "off" ] -> { false }
END

ARGUMENT EXTEND sauto_opts
| [ "using" ne_constr_list_sep(l, ",") sauto_opts(sopts) ] -> { SOUse l :: sopts }
| [ "unfolding" ne_reference_list_sep(l, ",") sauto_opts(sopts) ] -> { SOUnfold l :: sopts }
| [ "inverting" ne_reference_list_sep(l, ",") sauto_opts(sopts) ] -> { SOInv l :: sopts }
| [ "with" ne_preident_list_sep(l, ",") sauto_opts(sopts) ] -> { SOBases l :: sopts }
| [ "use:" ne_constr_list_sep(l, ",") sauto_opts(sopts) ] -> { SOUse l :: sopts }
| [ "gen:" ne_constr_list_sep(l, ",") sauto_opts(sopts) ] -> { SOGen l :: sopts }
| [ "unfold:" "*" sauto_opts(sopts) ] -> { SOUnfoldAll :: sopts }
| [ "unfold:" "-" sauto_opts(sopts) ] -> { SOUnfoldNone :: sopts }
| [ "unfold:" ne_reference_list_sep(l, ",") sauto_opts(sopts) ] -> { SOUnfold l :: sopts }
| [ "unfold!:" "*" sauto_opts(sopts) ] -> { SOAlwaysUnfoldAll :: sopts }
| [ "unfold!:" "-" sauto_opts(sopts) ] -> { SOAlwaysUnfoldNone :: sopts }
| [ "unfold!:" ne_reference_list_sep(l, ",") sauto_opts(sopts) ] -> { SOAlwaysUnfold l :: sopts }
| [ "inv:" "*" sauto_opts(sopts) ] -> { SOInvAll :: sopts }
| [ "inv:" "-" sauto_opts(sopts) ] -> { SOInv [] :: sopts }
| [ "inv:" "never" sauto_opts(sopts) ] -> { SOInvNone :: sopts }
| [ "inv:" ne_reference_list_sep(l, ",") sauto_opts(sopts) ] -> { SOInv l :: sopts }
| [ "ctrs:" "*" sauto_opts(sopts) ] -> { SOCtrsAll :: sopts }
| [ "ctrs:" "-" sauto_opts(sopts) ] -> { SOCtrs [] :: sopts }
| [ "ctrs:" "never" sauto_opts(sopts) ] -> { SOCtrsNone :: sopts }
| [ "ctrs:" ne_reference_list_sep(l, ",") sauto_opts(sopts) ] -> { SOCtrs l :: sopts }
| [ "cases:" "*" sauto_opts(sopts) ] -> { SOCaseSplitAll :: sopts }
| [ "cases:" "-" sauto_opts(sopts) ] -> { SOCaseSplit [] :: sopts }
| [ "cases:" "never" sauto_opts(sopts) ] -> { SOCaseSplitNone :: sopts }
| [ "cases:" ne_reference_list_sep(l, ",") sauto_opts(sopts) ] -> { SOCaseSplit l :: sopts }
| [ "split:" "*" sauto_opts(sopts) ] -> { SOSimpleSplitAll :: sopts }
| [ "split:" "-" sauto_opts(sopts) ] -> { SOSimpleSplit [] :: sopts }
| [ "split:" "never" sauto_opts(sopts) ] -> { SOSimpleSplitNone :: sopts }
| [ "split:" ne_reference_list_sep(l, ",") sauto_opts(sopts) ] -> { SOSimpleSplit l :: sopts }
| [ "db:" "*" sauto_opts(sopts) ] -> { SOBasesAll :: sopts }
| [ "db:" "-" sauto_opts(sopts) ] -> { SOBases [] :: sopts }
| [ "db:" ne_preident_list_sep(l, ",") sauto_opts(sopts) ] -> { SOBases l :: sopts }
| [ "db+:" ne_preident_list_sep(l, ",") sauto_opts(sopts) ] -> { SOBasesAdd l :: sopts }
| [ "rew:db:" "-" sauto_opts(sopts) ] -> { SORewBases [] :: sopts }
| [ "rew:db:" ne_preident_list_sep(l, ",") sauto_opts(sopts) ] -> { SORewBases l :: sopts }
| [ "rew:db+:" ne_preident_list_sep(l, ",") sauto_opts(sopts) ] -> { SORewBasesAdd l :: sopts }
| [ "hint:db:" "*" sauto_opts(sopts) ] -> { SOHintBasesAll :: sopts }
| [ "hint:db:" "-" sauto_opts(sopts) ] -> { SOHintBases [] :: sopts }
| [ "hint:db:" ne_preident_list_sep(l, ",") sauto_opts(sopts) ] -> { SOHintBases l :: sopts }
| [ "hint:db+:" ne_preident_list_sep(l, ",") sauto_opts(sopts) ] -> { SOHintBasesAdd l :: sopts }
| [ "finish:" tactic4(tac) sauto_opts(sopts) ] -> { SOFinish tac :: sopts }
| [ "final:" tactic4(tac) sauto_opts(sopts) ] -> { SOFinal tac :: sopts }
| [ "solve:" tactic4(tac) sauto_opts(sopts) ] -> { SOSolve tac :: sopts }
| [ "simp:" tactic4(tac) sauto_opts(sopts) ] -> { SOSimp tac :: sopts }
| [ "ssimp:" tactic4(tac) sauto_opts(sopts) ] -> { SOSSimp tac :: sopts }
| [ "solve+:" tactic4(tac) sauto_opts(sopts) ] -> { SOSolveAdd tac :: sopts }
| [ "simp+:" tactic4(tac) sauto_opts(sopts) ] -> { SOSimpAdd tac :: sopts }
| [ "ssimp+:" tactic4(tac) sauto_opts(sopts) ] -> { SOSSimpAdd tac :: sopts }
| [ "fwd:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOForward b :: sopts }
| [ "ecases:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOEagerCaseSplit b :: sopts }
| [ "sinv:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOSimpleInvert b :: sopts }
| [ "einv:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOEagerInvert b :: sopts }
| [ "ered:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOEagerReduce b :: sopts }
| [ "erew:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOEagerRewrite b :: sopts }
| [ "drew:" sauto_bopt(b) sauto_opts(sopts) ] -> { SODirectedRewrite b :: sopts }
| [ "urew:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOUndirectedRewrite b :: sopts }
| [ "rew:" sauto_bopt(b) sauto_opts(sopts) ] -> { SORewrite b :: sopts }
| [ "brefl:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOReflect b :: sopts }
| [ "brefl!:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOReflectRaw b :: sopts }
| [ "red:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOReduce b :: sopts }
| [ "sapp:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOSapply b :: sopts }
| [ "limit:" integer(i) sauto_opts(sopts) ] -> { SOLimit i :: sopts }
| [ "depth:" integer(i) sauto_opts(sopts) ] -> { SODepth i :: sopts }
| [ "exh:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOExhaustive b :: sopts }
| [ "lia:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOLia b :: sopts }
| [ "sig:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOSig b :: sopts }
| [ "prf:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOPrf b :: sopts }
| [ "dep:" sauto_bopt(b) sauto_opts(sopts) ] -> { SODep b :: sopts }
| [ "dep!:" sauto_bopt(b) sauto_opts(sopts) ] -> { SODepRaw b :: sopts }
| [ "eager:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOEager b :: sopts }
| [ "e:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOEager b :: sopts }
| [ "lazy:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOEager (not b) :: sopts }
| [ "l:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOEager (not b) :: sopts }
| [ "quick:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOQuick b :: sopts }
| [ "q:" sauto_bopt(b) sauto_opts(sopts) ] -> { SOQuick b :: sopts }
| [ "lq:" sauto_bopt(b) sauto_opts(sopts) ] -> {
    if b then
      SOEager false :: SOQuick true :: sopts
    else
      sopts
}
| [ ] -> { [SONop] }
END

(*****************************************************************************)
(* Tactics *)

TACTIC EXTEND Hammer_simple_splitting
| [ "simple_splitting" ] -> { simple_splitting
                                { (default_s_opts ()) with
                                  s_simple_splits = SAll } }
| [ "simple_splitting" "logic" ] -> { simple_splitting (default_s_opts ()) }
END

TACTIC EXTEND Hammer_eager_inverting
| [ "eager_inverting" ] -> { eager_inverting (default_s_opts ()) }
| [ "eager_inverting_dep" ] -> { eager_inverting
                                   { (default_s_opts ()) with
                                     s_dep = true } }
END

TACTIC EXTEND Hammer_sunfolding
| [ "sunfolding" ] -> { sunfolding true }
| [ "sunfolding" "weak" ] -> { sunfolding false }
END

TACTIC EXTEND Hammer_srun
| [ "srun" tactic4(tac) sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l
    (fun opts -> sinit opts <*>
                   Tacticals.New.tclSOLVE [ Hhutils.tacinterp tac ])
    "srun failed"
}
END

TACTIC EXTEND Hammer_scongruence
| [ "scongruence" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l scongruence "scongruence failed"
}
END

TACTIC EXTEND Hammer_sfirstorder
| [ "sfirstorder" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l sfirstorder "sfirstorder failed"
}
END

TACTIC EXTEND Hammer_strivial
| [ "strivial" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l strivial "strivial failed"
}
END

TACTIC EXTEND Hammer_sauto
| [ "sauto" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l sauto "sauto failed"
}
END

TACTIC EXTEND Hammer_hauto
| [ "hauto" sauto_opts(l) ] -> {
  try_usolve (hauto_s_opts ()) l sauto "hauto failed"
}
END

TACTIC EXTEND Hammer_qauto
| [ "qauto" sauto_opts(l) ] -> {
  try_usolve (qauto_s_opts ()) l sauto "qauto failed"
}
END

TACTIC EXTEND Hammer_cauto
| [ "cauto" sauto_opts(l) ] -> {
  let opts =
    { (default_s_opts ()) with s_forwarding = false }
  in
  try_usolve opts l sauto "cauto failed"
}
END

TACTIC EXTEND Hammer_ssimpl
| [ "ssimpl" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l ssimpl "ssimpl failed"
}
END

TACTIC EXTEND Hammer_csimpl
| [ "csimpl" sauto_opts(l) ] -> {
  let opts =
    { (default_s_opts ()) with s_forwarding = false }
  in
  try_usolve opts l ssimpl "csimpl failed"
}
END

TACTIC EXTEND Hammer_qsimpl
| [ "qsimpl" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l qsimpl "qsimpl failed"
}
END

TACTIC EXTEND Hammer_sintuition
| [ "sintuition" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l sintuition "sintuition failed"
}
END

TACTIC EXTEND Hammer_scrush
| [ "scrush" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l scrush "scrush failed"
}
END

TACTIC EXTEND Hammer_hcrush
| [ "hcrush" sauto_opts(l) ] -> {
  try_usolve (hauto_s_opts ()) l scrush "hcrush failed"
}
END

TACTIC EXTEND Hammer_qcrush
| [ "qcrush" sauto_opts(l) ] -> {
  try_usolve (qauto_s_opts ()) l scrush "qcrush failed"
}
END

TACTIC EXTEND Hammer_fcrush
| [ "fcrush" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l fcrush "fcrush failed"
}
END

TACTIC EXTEND Hammer_hfcrush
| [ "hfcrush" sauto_opts(l) ] -> {
  try_usolve (hauto_s_opts ()) l fcrush "hfcrush failed"
}
END

TACTIC EXTEND Hammer_qfcrush
| [ "qfcrush" sauto_opts(l) ] -> {
  try_usolve (qauto_s_opts ()) l fcrush "qfcrush failed"
}
END

TACTIC EXTEND Hammer_ecrush
| [ "ecrush" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l ecrush "ecrush failed"
}
END

TACTIC EXTEND Hammer_hecrush
| [ "hecrush" sauto_opts(l) ] -> {
  try_usolve (hauto_s_opts ()) l ecrush "hecrush failed"
}
END

TACTIC EXTEND Hammer_qecrush
| [ "qecrush" sauto_opts(l) ] -> {
  try_usolve (qauto_s_opts ()) l ecrush "qecrush failed"
}
END

TACTIC EXTEND Hammer_sblast
| [ "sblast" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l sblast "sblast failed"
}
END

TACTIC EXTEND Hammer_qblast
| [ "qblast" sauto_opts(l) ] -> {
  try_usolve (default_s_opts ()) l qblast "qblast failed"
}
END

TACTIC EXTEND Hammer_sauto_actions
| [ "sauto_actions" sauto_opts(l) ] -> {
  try_tactic (fun () -> interp_opts (default_s_opts ()) l print_actions)
}
END

TACTIC EXTEND Hammer_use
| [ "use" ne_constr_list_sep(l, ",") ] -> {
  try_tactic (fun () -> use_lemmas l)
}
END
